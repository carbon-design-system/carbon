import { client } from '@figma/code-connect';
import fs from 'fs';
import path from 'path';

// To run this file, cd to packages/react and run:
// FIGMA_ACCESS_TOKEN=<your-figma-access-token> npx tsx tasks/build-code-connect-icons.ts

async function generateIconsWithSizeProp() {
  // fetch components from a figma file. If the `node-id` query parameter is used,
  // only components within those frames will be included. This is useful if your
  // file is very large, as this will speed up the query by a lot
  let components = await client.getComponents(
    'https://figma.com/file/J5c0d85dSJn9JnBhSYYLmD?node-id=14109-411'
  );

  // Map from figma to React component names
  components = components.map((component) => ({
    ...component,
    name: component.name
      .split(/[.-]/g)
      .map((part) => part.charAt(0).toUpperCase() + part.slice(1))
      .join(''),
  }));

  console.log(components);

  const uniqueNames = new Set([...components.map((c) => c.name)]);

  const file = 'code-connect/Icons/icons.figma.tsx';
  fs.mkdirSync(path.dirname(file), { recursive: true });
  fs.writeFileSync(
    file,
    `\
// Code generated by task/build-code-connect-icons.ts. DO NOT EDIT.
import figma from '@figma/code-connect'

import {
${Array.from(uniqueNames)
  .map((iconName) => `  ${iconName},`)
  .join('\n')}
} from '@carbon/icons-react'

const props = {
  size: figma.enum('Size', {
    "16": 16,
    "20": 20,
    "24": 24,
    "32": 32,
  })
}

${components
  .map(
    (c) => `figma.connect(${c.name}, '${c.figmaUrl}', {
  props,
  example: ({ size }) => <${c.name} size={size} />
})`
  )
  .join('\n')}
`
  );
}

generateIconsWithSizeProp();
