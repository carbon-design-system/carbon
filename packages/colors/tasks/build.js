/**
 * Copyright IBM Corp. 2015, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* eslint-disable no-console */

'use strict';

require('core-js/features/array/flat-map');

const { types: t, generate } = require('@carbon/scss-generator');
const { paramCase } = require('change-case');
const fs = require('fs-extra');
const path = require('path');
const { colors } = require('../lib');

const SCSS_DIR = path.resolve(__dirname, '../scss');
const COLORS_ENTRYPOINT = path.join(SCSS_DIR, 'colors.scss');
const INDEX_ENTRYPOINT = path.join(SCSS_DIR, 'index.scss');
const MIXINS_ENTRYPOINT = path.join(SCSS_DIR, 'mixins.scss');
const MODULES_ENTRYPOINT = path.join(SCSS_DIR, 'module.scss');
const FILE_BANNER = t.Comment(` Code generated by @carbon/colors. DO NOT EDIT.

 Copyright IBM Corp. 2018, 2020

 This source code is licensed under the Apache-2.0 license found in the
 LICENSE file in the root directory of this source tree.
`);
const NAMESPACE = 'carbon';

async function build() {
  // Colors has the shape:
  // type Colors = {
  //   [swatch: string]: {
  //     [grade: string]: string,
  //   }
  // };
  //
  // We want to convert this into a flat array of variable descriptors that we
  // can use to create mixins. This flat array will look like:
  // type ColorValues = Array<{ name: string, value: string }>
  const colorValues = Object.keys(colors).reduce((acc, key) => {
    const swatch = paramCase(key);
    const values = Object.keys(colors[key]).reduce((acc, grade) => {
      const value = colors[key][grade];
      return acc.concat({
        swatch,
        grade,
        value,
      });
    }, []);

    return acc.concat(...values);
  }, []);

  const colorVariables = colorValues.map(({ grade, swatch, value }) =>
    t.Assignment({
      id: t.Identifier(`${swatch}-${grade}`),
      init: t.SassColor(value),
      default: true,
      global: true,
    })
  );
  const deprecatedColorVariables = colorValues.map(({ grade, swatch, value }) =>
    t.Assignment({
      id: t.Identifier(`ibm-color__${swatch}-${grade}`),
      init: t.SassColor(value),
      default: true,
      global: true,
    })
  );
  const colorMapProperties = t.SassMap({
    properties: Object.keys(colors).flatMap((swatch) => {
      const value = t.SassMap({
        properties: Object.keys(colors[swatch]).map((grade) => {
          return t.SassMapProperty({
            key: t.Identifier(grade),
            value: t.SassColor(colors[swatch][grade]),
          });
        }),
      });

      if (swatch === paramCase(swatch)) {
        return [
          t.SassMapProperty({
            key: t.Identifier(swatch),
            value,
            quoted: true,
          }),
        ];
      }

      return [
        t.SassMapProperty({
          key: t.Identifier(paramCase(swatch)),
          value,
          quoted: true,
        }),
        t.SassMapProperty({
          key: t.Identifier(swatch),
          value,
          quoted: true,
        }),
      ];
    }),
  });
  const deprecatedColorMap = t.Assignment({
    id: t.Identifier('ibm-color-map'),
    init: colorMapProperties,
    default: true,
    global: true,
  });
  const colorMap = t.Assignment({
    id: t.Identifier('carbon--colors'),
    init: colorMapProperties,
    default: true,
    global: true,
  });

  const mixins = t.StyleSheet({
    children: [
      FILE_BANNER,
      t.Comment(`/ Define color variables
/ @access public
/ @group @carbon/colors
/ @deprecated Use \`$${NAMESPACE}--colors\` going forward`),
      t.SassMixin({
        id: t.Identifier('ibm--colors'),
        body: t.BlockStatement([
          ...deprecatedColorVariables,
          deprecatedColorMap,
        ]),
      }),

      t.Comment(`/ Define color variables
/ @access public
/ @group @carbon/colors`),
      t.SassMixin({
        id: t.Identifier(`${NAMESPACE}--colors`),
        body: t.BlockStatement([
          ...colorValues.map(({ grade, swatch, value }) =>
            t.Assignment({
              id: t.Identifier(`carbon--${swatch}-${grade}`),
              init: t.SassColor(value),
              default: true,
              global: true,
            })
          ),
          ...colorVariables,
          colorMap,
        ]),
      }),
    ],
  });

  const entrypoint = t.StyleSheet([
    FILE_BANNER,
    t.SassImport('./mixins'),
    t.Comment(' Deprecated ☠️'),
    t.SassMixinCall(t.Identifier('ibm--colors')),
    t.Comment(' Preferred'),
    t.SassMixinCall(t.Identifier(`${NAMESPACE}--colors`)),
  ]);

  const sassModule = t.StyleSheet([
    FILE_BANNER,
    t.Newline(),

    t.Comment(`/ Value for black
/ @access public
/ @group @carbon/colors`),
    t.Assignment({
      id: t.Identifier('black'),
      init: t.SassColor('#000000'),
      default: true,
    }),
    t.Newline(),

    t.Comment(`/ Value for white
/ @access public
/ @group @carbon/colors`),
    t.Assignment({
      id: t.Identifier('white'),
      init: t.SassColor('#ffffff'),
      default: true,
    }),
    t.Newline(),

    ...colorValues.flatMap(({ grade, swatch, value }) => {
      return [
        t.Comment(`/ Value for ${swatch}-${grade} from the IBM Design Language
/ @access public
/ @group @carbon/colors`),
        t.Assignment({
          id: t.Identifier(`${swatch}-${grade}`),
          init: t.SassColor(value),
          default: true,
        }),
        t.Newline(),
      ];
    }),

    t.Comment(`/ Colors from the IBM Design Language
/ @access public
/ @group @carbon/colors`),
    t.Assignment({
      id: t.Identifier('colors'),
      init: t.SassMap({
        properties: Object.keys(colors).map((key) => {
          const swatch = paramCase(key);
          return t.SassMapProperty({
            key: t.Identifier(swatch),
            value: t.SassMap({
              properties: Object.keys(colors[key]).map((grade) => {
                return t.SassMapProperty({
                  key: t.Identifier(grade),
                  value: t.SassColor(colors[key][grade]),
                });
              }),
            }),
          });
        }),
      }),
      default: true,
    }),
  ]);

  await fs.ensureDir(SCSS_DIR);
  await Promise.all([
    fs.writeFile(MIXINS_ENTRYPOINT, generate(mixins).code),
    fs.writeFile(COLORS_ENTRYPOINT, generate(entrypoint).code),
    fs.writeFile(INDEX_ENTRYPOINT, generate(entrypoint).code),
    fs.writeFile(MODULES_ENTRYPOINT, generate(sassModule).code),
  ]);
}

build().catch((error) => {
  console.error(error);
  process.exit(1);
});
