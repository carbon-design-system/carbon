/**
 * @license
 *
 * Copyright IBM Corp. 2024
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { LitElement, html } from 'lit';
import { property } from 'lit/decorators.js';
import { prefix } from '../../globals/settings';
import styles from './menu-item.scss?lit';
import { carbonElement as customElement } from '../../globals/decorators/carbon-element';
import { consume } from '@lit/context';
import { MenuContext } from './menu-context';

/**
 * Menu Item.
 *
 * @element cds-menu-item-radio-group
 */
@customElement(`${prefix}-menu-item-radio-group`)
class CDSmenuItemRadioGroup extends LitElement {
  @consume({ context: MenuContext })
  context;

  /**
   * Label for the menu item radio group.
   */
  @property({ type: String })
  label;
  /**
   * List of items in the radio group.
   */
  @property({ type: Array })
  items = [];

  /**
   * Selected item in the radio group.
   */
  @property({ type: String, attribute: true })
  selectedItem;

  /**
   * List of items in the radio group.
   */
  @property()
  itemToString?: (item: Array<String | number>) => String;
  /**
   * The name of the custom event fired when the selection state changes.
   */
  static get eventOnChange() {
    return `${prefix}-item-changed`;
  }

  firstUpdated(): void {
    this.context.updateFromChild({ hasSelectableItems: true });
  }

  _handleClick = (item, e) => {
    this.selectedItem = item;

    const init = {
      bubbles: true,
      cancelable: true,
      composed: true,
      detail: {
        triggeredBy: e.target,
      },
    };
    if (
      this.dispatchEvent(
        new CustomEvent(
          (this.constructor as typeof CDSmenuItemRadioGroup).eventOnChange,
          init
        )
      )
    ) {
      this.dispatchEvent(
        new CustomEvent(
          (this.constructor as typeof CDSmenuItemRadioGroup).eventOnChange,
          init
        )
      );
    }
  };
  render() {
    const defaultItemToString = (item) => item.toString();
    const {
      label,
      items,
      itemToString = defaultItemToString,
      selectedItem,
      _handleClick: handleClick,
    } = this;
    return html`
      <ul role="group" aria-label="${label}">
        ${items.map(
          (item) => html`
            <cds-menu-item
              label="${itemToString(item)}"
              role="menuitemradio"
              aria-checked="${item === selectedItem}"
              @click="${(e) => {
                handleClick(item, e);
              }}"></cds-menu-item>
          `
        )}
      </ul>
    `;
  }
  static styles = styles; // `styles` here is a `CSSResult` generated by custom Vite loader
}
export default CDSmenuItemRadioGroup;
