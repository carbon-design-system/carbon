//
// Copyright IBM Corp. 2021
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//

@use 'sass:list';
@use 'sass:map';
@use './config' as *;
@use './theme';
@use './utilities/custom-property';

$-default-layer-sets: (
  layer: (
    theme.$layer-01,
    theme.$layer-02,
    theme.$layer-03,
  ),
  layer-active: (
    theme.$layer-active-01,
    theme.$layer-active-02,
    theme.$layer-active-03,
  ),
  layer-hover: (
    theme.$layer-hover-01,
    theme.$layer-hover-02,
    theme.$layer-hover-03,
  ),
  layer-selected: (
    theme.$layer-selected-01,
    theme.$layer-selected-02,
    theme.$layer-selected-03,
  ),
  layer-selected-hover: (
    theme.$layer-selected-hover-01,
    theme.$layer-selected-hover-02,
    theme.$layer-selected-hover-03,
  ),
  layer-accent: (
    theme.$layer-accent-01,
    theme.$layer-accent-02,
    theme.$layer-accent-03,
  ),
  layer-accent-hover: (
    theme.$layer-accent-hover-01,
    theme.$layer-accent-hover-02,
    theme.$layer-accent-hover-03,
  ),
  layer-accent-active: (
    theme.$layer-accent-active-01,
    theme.$layer-accent-active-02,
    theme.$layer-accent-active-03,
  ),
  field: (
    theme.$field-01,
    theme.$field-02,
    theme.$field-03,
  ),
  field-hover: (
    theme.$field-hover-01,
    theme.$field-hover-02,
    theme.$field-hover-03,
  ),
  border-subtle: (
    theme.$border-subtle-01,
    theme.$border-subtle-02,
    theme.$border-subtle-03,
  ),
  border-subtle-selected: (
    theme.$border-subtle-selected-01,
    theme.$border-subtle-selected-02,
    theme.$border-subtle-selected-03,
  ),
  border-strong: (
    theme.$border-strong-01,
    theme.$border-strong-02,
    theme.$border-strong-03,
  ),
);

/// Define a map of layer sets, each set should have values for each layer in
/// the application. The key of this map is used for the CSS Custom Property
/// name whose value is updated as more layers are added.
/// @type {Map}
$layer-sets: () !default;
$layer-sets: map.deep-merge($-default-layer-sets, $layer-sets);

/// Emit the layer tokens defined in $layer-sets for the given $level
/// @param {Number} $level
@mixin -emit-layer-tokens($level) {
  @each $key, $layer-set in $layer-sets {
    $value: list.nth($layer-set, $level);
    @include custom-property.declaration($key, $value);
  }
}

:root {
  @include -emit-layer-tokens(1);
}

.#{$prefix}--layer-one {
  @include -emit-layer-tokens(1);
}

.#{$prefix}--layer-two {
  @include -emit-layer-tokens(2);
}

.#{$prefix}--layer-three {
  @include -emit-layer-tokens(3);
}
